---
layout: post
title:  "OCP - Open/Closed Principle (with examples)"
date:   2020-08-13 15:52:00:00 +0000
categories: programming solid
---

The Open/Closed is one of the **SOLID** Principles postulated by Robert Martin.

**SOLID** is a mnemonic achronym that stands for:

- **S**ingle Responsibiliy (SRP)
- **O**pen closed (OCP)
- **L**iskov Substitution (LSP)
- **I**nterface Segregation (ISP)
- **D**ependency Inversion (DIP)

This 5 principles must guide every software developer in wrinting his code. In this article I'll focus on the second one.

This is an article of the SOLID Principles serie. Checkout the other articles here:

- [Single Responsibiliy (SRP)](2020-08-12-solid-srp.markdown)
- [Liskov Substitution (LSP)](//#)
- [Interface Segregation (ISP)](//#)
- [Dependency Inversion (DIP)](//#)

## The Open/Closed Principle

The Open/Closed Principle says that 

> _"A module should be Open to extension and closed to modification"_

This principle means that you should be able to change the behavior of a module (e.g. a Java Class) by writing new code, instead of changing the existing one.

How is this possible? In the Object Oriented Programming, it's possible through an extensive usage of intheritance and polymorphism.

Imagine that you're dealing with the following requirement: _The system must be able to export the data in Excel format_.

You could address this requirement by writing the code as follows:

     public class DataSerializerService{
		
		private MyData getDataFromDB(){
			//Query the DB to retrieve the data
			...
		}
		
		private MyManipulatedData manipulate(MyData d){
			//Receive the data and change them accordingly to some policy
			...
		}
		
		private FileOutputStream writeToExcel(MyManipulatedData d){
			//Receive the manipulated data and produces the Excel file
			...
		}
		
		public FileOutputStream runService(){
			
			MyData data = getDataFromDB();
			
			MyManipulatedData manipulated = manipulate(data);
			
			return writeToExcel(manipulated);
			
		}
		
	 }

This code works fine, but it's far from being a good code. Why? Imagine that one week after the releas in production, the customer comes to you
with a change request saying: _Change the current behavior of the system in order to produce a PDF file in place of the Excel._

What you need to do? You should **change** the _writeToExcel_ method, easy.  Yes easy... but keep in mind a "mantra": 

> Everytime you change something in your code, you are prone to regressions and bug generation.

This is the reason why extending the code with new functionalities that replace the old one is always a better choice.

A more OCP compliant code for the scenario is the following:

	  public interface DataSerializer{
			
			public FileOutputStream write(MyManipulatedData data);
			
	  }

	  public class ExcelSerializer implements DataSerializer{
			
			public FileOutputStream write(MyManipulatedData data){
				//Writes the data into an Excel file
				...
			}
			
	  }

	  public class DataSerializationService{
	  
		private DataSerializer serializer = new ExcelSerializer();
		
		private MyData getDataFromDB(){
			//Query the DB to retrieve the data
			...
		}
		
		private MyManipulatedData manipulate(MyData d){
			//Receive the data and change them accordingly to some policy
			...
		}
		
		public FileOutputStream runService(){
			
			MyData data = getDataFromDB();
			
			MyManipulatedData manipulated = manipulate(data);
			
			return serializer.write(manipulated);
			
		}
		
	 }
	  
With this approach, when a we will need to produce a PDF in place of the Excel, we have only to **extend** the code with a new implementation of a DataSerializer:
	  
	  public class PDFSerializer implements DataSerializer{
			
			public FileOutputStream write(MyManipulatedData data){
				//Writes the data into an PDF file
				...
			}

	  }

And use this in the DataSerializationService:

	  private DataSerializer serializer = new PDFSerializer();


The code above, has still room for further improvements. For example, both the _manipulate_ and the _getDataFromDB_ methods should be supplied to the
_DataSerializationService_ as specific implementations of other two interfaces.


## About the creator

The SOLID principles were postulated by Robert Martin nei primi anni 2000.
[**Robert Martin**](https://en.wikipedia.org/wiki/Robert_C._Martin), aka _"Uncle Bob"_ is a coder since 1970 and he's now a world-wide-appreciated software architect, ICT expert and clean code evangelist.
Together with Martin Fowler, Ken Shwaber and other forteen people, he was also one of the creator of the [Agile Manifesto](https://agilemanifesto.org/) that is now a guideline for many development team all around the world.


## References

- Agile Software Development: Principles, Patterns and Practices - Robert C. Martin
- The Clean Coder: A Code of Conduct for Professional Programmers - Robert C. Martin
- Clean architecture - Robert C. Martin
