<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Antonino Sirchia</title><link>https://antoninosirchia.it/posts/</link><description>Recent content in Posts on Antonino Sirchia</description><generator>Hugo -- gohugo.io</generator><language>it-it</language><lastBuildDate>Sun, 08 Jan 2023 14:30:00 +0000</lastBuildDate><atom:link href="https://antoninosirchia.it/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Generative AI the new 'Big thing'</title><link>https://antoninosirchia.it/posts/generative-ai-the-new-big-thing/</link><pubDate>Sun, 08 Jan 2023 14:30:00 +0000</pubDate><guid>https://antoninosirchia.it/posts/generative-ai-the-new-big-thing/</guid><description>Generative AI, that stands for &amp;ldquo;Generative Artificial Intelligence&amp;rdquo;, is quickly becoming one of the most interesting and promising technologies of our time. But what exactly is generative artificial intelligence and how does it work? Long story short: it is a form of artificial intelligence that is able to create new and original content using machine learning algorithms.
The generated contents may be really diThis can include creating music, art, design, and even writing.</description></item><item><title>How to write a good commit message</title><link>https://antoninosirchia.it/posts/how-to-write-a-good-commit-message/</link><pubDate>Thu, 15 Oct 2020 17:31:34 +0000</pubDate><guid>https://antoninosirchia.it/posts/how-to-write-a-good-commit-message/</guid><description>Developer: Wow. That&amp;rsquo;s a very good bugfix, smart and elegant. My code reviewer will be very proud of me. Let&amp;rsquo;s push it&amp;hellip;
Git: &amp;ldquo;Insert a commit message&amp;hellip;&amp;quot;
Developer: Mmm, the commit message&amp;hellip; I&amp;rsquo;ll put &amp;ldquo;bugfix&amp;rdquo;
Code reviewer: WTF!?!&amp;hellip;
I guess that the upmentioned scenario is familiar to many developers.
Many times, after hours of effort in fixing a bug or developing a new feature, we are to lazy to spend those further 5 minutes to write a good commit message.</description></item><item><title> How I am leveraging my IT skills against Covid-19 pandemic</title><link>https://antoninosirchia.it/posts/how-i-am-leveraging-my-it-skills-against-covid-19-pandemic/</link><pubDate>Sat, 12 Sep 2020 17:12:02 +0000</pubDate><guid>https://antoninosirchia.it/posts/how-i-am-leveraging-my-it-skills-against-covid-19-pandemic/</guid><description>It was the february the 28th, 2020.
I came back from a vacation day and my boss called me apart and said me:
Hey, surely you have heard about the Covid-19 situation.. We have the chance to do something&amp;hellip;
Verona, Venice and the entire Veneto region asked us to setup a bio-surveillance platform to monitor and prevent the contagion.
It was scaring and, at the same time, exciting!</description></item><item><title>Top 5 design pattern every Programmer should know (and use)</title><link>https://antoninosirchia.it/posts/top-5-design-pattern-every-programmer-should-know-and-use/</link><pubDate>Sat, 12 Sep 2020 16:51:47 +0000</pubDate><guid>https://antoninosirchia.it/posts/top-5-design-pattern-every-programmer-should-know-and-use/</guid><description>TL;DR Following a design pattern is the best way possible you have to solve a problem without undesired side effects.
There are a lot of design patterns for many different purposes. But the top 5, in my opinion, is the following one:
Singleton (Creational Pattern) Factory (Creational Pattern) Strategy (Behavioral Pattern) Observer (Behavioral Pattern) Facade (Architectural Pattern) What is a design pattern? Every developer, sooner or later, is faced with frequent problems for which someone else, on the basis of various experiences, has defined a solution universally recognized as &amp;ldquo;the best one&amp;rdquo;.</description></item><item><title>DIP - Depencency Inversion Principle (with examples)</title><link>https://antoninosirchia.it/posts/solid-principles/dip-depencency-inversion-principle-with-examples/</link><pubDate>Sat, 22 Aug 2020 14:38:17 +0000</pubDate><guid>https://antoninosirchia.it/posts/solid-principles/dip-depencency-inversion-principle-with-examples/</guid><description>The Interface Segretation is a principle postulated by Robert Martin among the SOLID Principles for Object Oriented software development.
SOLID is a mnemonic achronym that stands for:
Single Responsibiliy (SRP) Open closed (OCP) Liskov Substitution (LSP) Interface Segregation (ISP) Dependency Inversion (DIP) This 5 principles must guide every software developer in wrinting his code. In this article I&amp;rsquo;ll focus on the last one.
This is an article of the SOLID Principles serie.</description></item><item><title>ISP - Interface Segregation Principle (with examples)</title><link>https://antoninosirchia.it/posts/solid-principles/interface-segregation-principle/</link><pubDate>Tue, 18 Aug 2020 18:46:00 +0000</pubDate><guid>https://antoninosirchia.it/posts/solid-principles/interface-segregation-principle/</guid><description>The Interface Segretation is a principle postulated by Robert Martin among the SOLID Principles for Object Oriented software development.
SOLID is a mnemonic achronym that stands for:
Single Responsibiliy (SRP) Open closed (OCP) Liskov Substitution (LSP) Interface Segregation (ISP) Dependency Inversion (DIP) This 5 principles must guide every software developer in wrinting his code. In this article I&amp;rsquo;ll focus on the fourth one.
This is an article of the SOLID Principles serie.</description></item><item><title>LSP - Liskov Substitution Principle (with examples)</title><link>https://antoninosirchia.it/posts/solid-principles/liskov-substitution-principle/</link><pubDate>Fri, 14 Aug 2020 18:10:00 +0000</pubDate><guid>https://antoninosirchia.it/posts/solid-principles/liskov-substitution-principle/</guid><description>The Liskov Substitution is a principle postulated by Barbara Liskov and included by Robert Martin among the SOLID Principles for Object Oriented software development.
SOLID is a mnemonic achronym that stands for:
Single Responsibiliy (SRP) Open closed (OCP) Liskov Substitution (LSP) Interface Segregation (ISP) Dependency Inversion (DIP) This 5 principles must guide every software developer in wrinting his code. In this article I&amp;rsquo;ll focus on the third one.</description></item><item><title>OCP - Open/Closed Principle (with examples)</title><link>https://antoninosirchia.it/posts/solid-principles/open-closed-principle/</link><pubDate>Thu, 13 Aug 2020 15:52:00 +0000</pubDate><guid>https://antoninosirchia.it/posts/solid-principles/open-closed-principle/</guid><description>The Open/Closed is one of the SOLID Principles postulated by Robert Martin.
SOLID is a mnemonic achronym that stands for:
Single Responsibiliy (SRP) Open closed (OCP) Liskov Substitution (LSP) Interface Segregation (ISP) Dependency Inversion (DIP) This 5 principles must guide every software developer in wrinting his code. In this article I&amp;rsquo;ll focus on the second one.
This is an article of the SOLID Principles serie. Checkout the other articles here:</description></item><item><title>SRP - Single Responsibiliy Principle (with examples)</title><link>https://antoninosirchia.it/posts/solid-principles/single-responsibility-principle/</link><pubDate>Wed, 12 Aug 2020 16:33:00 +0000</pubDate><guid>https://antoninosirchia.it/posts/solid-principles/single-responsibility-principle/</guid><description>The Single Responsibiliy is one of the SOLID Principles postulated by Robert Martin.
SOLID is a mnemonic achronym that stands for:
Single Responsibiliy (SRP) Open closed (OCP) Liskov Substitution (LSP) Interface Segregation (ISP) Dependency Inversion (DIP) This 5 principles must guide every software developer in wrinting his code. In this article I&amp;rsquo;ll focus on the first one.
This is an article of the SOLID Principles serie. Checkout the other articles here:</description></item><item><title>What is Docker?</title><link>https://antoninosirchia.it/posts/what-is-docker/</link><pubDate>Sat, 21 Sep 2019 15:38:00 +0000</pubDate><guid>https://antoninosirchia.it/posts/what-is-docker/</guid><description>Maybe you&amp;rsquo;ve heard about Docker, but maybe you stil do not have much clear what docker is. In this post we will explore such technology and will go through 3 reason why you should definitely consider to migrate toward a docker based release of your software.
But let&amp;rsquo;s start from the beginning: the Docker page on Wikipedia says that
Docker is a set of platform-as-a-service (PaaS) products that use OS-level virtualization to deliver software in packages called containers.</description></item><item><title>Welcome !</title><link>https://antoninosirchia.it/posts/welcome/</link><pubDate>Sun, 15 Sep 2019 15:38:00 +0000</pubDate><guid>https://antoninosirchia.it/posts/welcome/</guid><description>Here we are&amp;hellip;
For passion, for study and for work I have been in the IT field for 15 years. I saw so many technologies borning and dying and, although I am only 30 years old (more or less), I have accumulated some experience in different fields.
I started as a freelance developer, making websites (of dubious quality, I admit) for friends and relatives; I continued studying the fundamentals of computer science at the University of Palermo, in Italy; now I work at one of the biggest IT companies in Italy and I learn something new every day.</description></item></channel></rss>